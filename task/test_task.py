from apscheduler.schedulers.background import BackgroundScheduler
import logging
import sys
import os
import time
from datetime import datetime, time as dt_time, timedelta
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n v√†o sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from config.settings import MAX_CAMERA_WORKERS, TIMEOUT_SECONDS, LOG_LEVEL, LOG_FORMAT
except ImportError:
    # Fallback values if config is not available
    MAX_CAMERA_WORKERS = 4
    TIMEOUT_SECONDS = 30
    LOG_LEVEL = "INFO"
    LOG_FORMAT = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

from services.rtsp_service import rtsp_service
from services.thread_safe_rtsp_service import thread_safe_rtsp_service
from services.database_service import database_service
from db.database import get_connection

# C·∫•u h√¨nh logging
logging.basicConfig(level=getattr(logging, LOG_LEVEL), format=LOG_FORMAT)
logger = logging.getLogger(__name__)

class CameraTaskServiceTest:
    def __init__(self):
        self.scheduler = BackgroundScheduler(daemon=True)
        self.max_workers = MAX_CAMERA_WORKERS  # S·ªë l∆∞·ª£ng thread t·ªëi ƒëa ƒë·ªÉ x·ª≠ l√Ω camera ƒë·ªìng th·ªùi
        self.timeout_seconds = TIMEOUT_SECONDS  # Timeout cho m·ªói camera
        self.processing_lock = threading.Lock()  # Lock ƒë·ªÉ ƒë·∫£m b·∫£o thread safety
        logger.info(f"Initialized CameraTaskService with {self.max_workers} max workers")

    def _check_and_process_cameras(self):
        """
        C√¥ng vi·ªác ƒë∆∞·ª£c l√™n l·ªãch ƒë·ªÉ ki·ªÉm tra th·ªùi gian v√† x·ª≠ l√Ω camera.
        Ch·ªâ th·ª±c hi·ªán khi th·ªùi gian hi·ªán t·∫°i kh·ªõp v·ªõi capture_time trong database.
        """
        current_time = datetime.now().time()
        logger.info(f"Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i: {current_time.strftime('%H:%M:%S')}")
        
        # L·∫•y danh s√°ch l·ªãch ch·ª•p ƒëang ho·∫°t ƒë·ªông
        active_schedules = database_service.get_active_schedules()
        
        if not active_schedules:
            logger.info("Kh√¥ng c√≥ l·ªãch ch·ª•p n√†o ƒëang ho·∫°t ƒë·ªông.")
            return
        
        logger.info(f"T√¨m th·∫•y {len(active_schedules)} l·ªãch ch·ª•p ƒëang ho·∫°t ƒë·ªông")
        
        # Ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ kh·ªõp v·ªõi b·∫•t k·ª≥ capture_time n√†o kh√¥ng
        matching_schedules = []
        for schedule in active_schedules:
            capture_time_str = schedule['capture_time']
            # Chuy·ªÉn ƒë·ªïi string th√†nh time object
            if isinstance(capture_time_str, str):
                try:
                    capture_time = datetime.strptime(capture_time_str, '%H:%M:%S').time()
                except ValueError:
                    logger.warning(f"Kh√¥ng th·ªÉ parse th·ªùi gian: {capture_time_str}")
                    continue
            else:
                capture_time = capture_time_str
            
            # So s√°nh th·ªùi gian (ch·ªâ so s√°nh gi·ªù v√† ph√∫t, b·ªè qua gi√¢y)
            if (current_time.hour == capture_time.hour and 
                current_time.minute == capture_time.minute):
                matching_schedules.append(schedule)
                logger.info(f"‚úÖ Th·ªùi gian kh·ªõp v·ªõi l·ªãch ch·ª•p: {capture_time_str}")
        
        if not matching_schedules:
            logger.info("Kh√¥ng c√≥ l·ªãch ch·ª•p n√†o kh·ªõp v·ªõi th·ªùi gian hi·ªán t·∫°i.")
            return
        
        # N·∫øu c√≥ l·ªãch ch·ª•p kh·ªõp, th·ª±c hi·ªán x·ª≠ l√Ω camera
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera theo {len(matching_schedules)} l·ªãch ch·ª•p kh·ªõp")
        self._process_cameras()

    def _process_single_camera(self, camera_info):
        """
        X·ª≠ l√Ω m·ªôt camera ƒë∆°n l·∫ª - l·∫•y frame, ph√°t hi·ªán QR v√† l∆∞u v√†o database.
        """
        camera_name = camera_info.get('name', 'N/A')
        rtsp_url = camera_info.get('rtsp_url')
        camera_id = camera_info.get('camera_id')
        
        if not rtsp_url:
            logger.warning(f"Camera '{camera_name}' kh√¥ng c√≥ rtsp_url. B·ªè qua.")
            return {"success": False, "camera_name": camera_name, "reason": "No RTSP URL"}
        
        try:
            thread_id = threading.current_thread().name
            
            # Th·ªùi gian b·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera
            camera_start_time = time.time()
            start_dt = datetime.fromtimestamp(camera_start_time)
            logger.info(f"[{thread_id}] üé¨ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω Camera: {camera_name} (ID: {camera_id}) l√∫c: {start_dt.strftime('%H:%M:%S')}.{start_dt.microsecond//1000:03d}ms")
            logger.info(f"[{thread_id}] üîó RTSP URL: {rtsp_url}")
            
            # 1. L·∫•y frame t·ª´ RTSP (s·ª≠ d·ª•ng thread-safe service)
            frame_start_time = time.time()
            frame = thread_safe_rtsp_service.get_frame_from_rtsp(rtsp_url)
            frame_end_time = time.time()
            frame_duration = (frame_end_time - frame_start_time) * 1000

            if frame is not None:
                logger.info(f"[{thread_id}] ‚úÖ Frame ƒë√£ ƒë∆∞·ª£c l·∫•y th√†nh c√¥ng trong {frame_duration:.2f}ms")
                
                # 2. N·∫øu l·∫•y frame th√†nh c√¥ng, th·ª±c hi·ªán nh·∫≠n di·ªán QR v√† l∆∞u v√†o database
                qr_start_time = time.time()
                logger.info(f"[{thread_id}] üîç B·∫Øt ƒë·∫ßu ph√°t hi·ªán QR cho Camera: {camera_name}")
                newly_found_rois = thread_safe_rtsp_service.qr_detection_saveToDb_safe(frame, camera_id)
                qr_end_time = time.time()
                qr_duration = (qr_end_time - qr_start_time) * 1000
                
                camera_end_time = time.time()
                total_camera_duration = (camera_end_time - camera_start_time) * 1000
                
                if newly_found_rois:
                    logger.info(f"[{thread_id}] üéØ C√°c ROI m·ªõi t√¨m th·∫•y cho {camera_name}: {len(newly_found_rois)} QR codes")
                    # Log chi ti·∫øt t·ª´ng QR code
                    for j, detection in enumerate(newly_found_rois):
                        rect, name, roi_width, center_x, center_y = detection
                        logger.info(f"[{thread_id}]   QR {j+1}: {name} - Center: ({center_x}, {center_y}) - Width: {roi_width}")
                    
                    logger.info(f"[{thread_id}] ‚è∞ Th·ªùi gian QR detection: {qr_duration:.2f}ms")
                    logger.info(f"[{thread_id}] ‚è∞ T·ªïng th·ªùi gian x·ª≠ l√Ω camera: {total_camera_duration:.2f}ms")
                    end_dt = datetime.fromtimestamp(camera_end_time)
                    logger.info(f"[{thread_id}] üèÅ K·∫øt th√∫c x·ª≠ l√Ω Camera: {camera_name} l√∫c: {end_dt.strftime('%H:%M:%S')}.{end_dt.microsecond//1000:03d}ms (Th√†nh c√¥ng)")
                    
                    return {
                        "success": True, 
                        "camera_name": camera_name, 
                        "qr_count": len(newly_found_rois),
                        "qr_codes": newly_found_rois,
                        "processing_time": total_camera_duration,
                        "frame_time": frame_duration,
                        "qr_time": qr_duration
                    }
                else:
                    logger.info(f"[{thread_id}] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ROI m·ªõi n√†o cho {camera_name}.")
                    logger.info(f"[{thread_id}] ‚è∞ Th·ªùi gian QR detection: {qr_duration:.2f}ms")
                    logger.info(f"[{thread_id}] ‚è∞ T·ªïng th·ªùi gian x·ª≠ l√Ω camera: {total_camera_duration:.2f}ms")
                    end_dt = datetime.fromtimestamp(camera_end_time)
                    logger.info(f"[{thread_id}] üèÅ K·∫øt th√∫c x·ª≠ l√Ω Camera: {camera_name} l√∫c: {end_dt.strftime('%H:%M:%S')}.{end_dt.microsecond//1000:03d}ms (Kh√¥ng c√≥ QR)")
                    
                    return {
                        "success": True, 
                        "camera_name": camera_name, 
                        "qr_count": 0,
                        "qr_codes": [],
                        "processing_time": total_camera_duration,
                        "frame_time": frame_duration,
                        "qr_time": qr_duration
                    }
            else:
                camera_end_time = time.time()
                total_camera_duration = (camera_end_time - camera_start_time) * 1000
                logger.error(f"[{thread_id}] ‚ùå Kh√¥ng th·ªÉ l·∫•y frame cho Camera: {camera_name}")
                logger.error(f"[{thread_id}] ‚è∞ Th·ªùi gian x·ª≠ l√Ω th·∫•t b·∫°i: {total_camera_duration:.2f}ms")
                end_dt = datetime.fromtimestamp(camera_end_time)
                logger.info(f"[{thread_id}] üèÅ K·∫øt th√∫c x·ª≠ l√Ω Camera: {camera_name} l√∫c: {end_dt.strftime('%H:%M:%S')}.{end_dt.microsecond//1000:03d}ms (L·ªói frame)")
                
                return {
                    "success": False, 
                    "camera_name": camera_name, 
                    "reason": "Cannot get frame",
                    "processing_time": total_camera_duration,
                    "frame_time": frame_duration,
                    "qr_time": 0
                }
                
        except Exception as e:
            error_time = time.time()
            total_error_duration = (error_time - camera_start_time) * 1000
            logger.error(f"[{threading.current_thread().name}] ‚ùå L·ªói khi x·ª≠ l√Ω Camera {camera_name}: {e}")
            logger.error(f"[{threading.current_thread().name}] ‚è∞ Th·ªùi gian x·ª≠ l√Ω l·ªói: {total_error_duration:.2f}ms")
            error_dt = datetime.fromtimestamp(error_time)
            logger.info(f"[{threading.current_thread().name}] üèÅ K·∫øt th√∫c x·ª≠ l√Ω Camera: {camera_name} l√∫c: {error_dt.strftime('%H:%M:%S')}.{error_dt.microsecond//1000:03d}ms (L·ªói)")
            
            return {
                "success": False, 
                "camera_name": camera_name, 
                "reason": str(e),
                "processing_time": total_error_duration,
                "frame_time": 0,
                "qr_time": 0
            }

    def _process_cameras(self):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ camera ƒë·ªìng th·ªùi - l·∫•y frame, ph√°t hi·ªán QR v√† l∆∞u v√†o database.
        """
        logger.info("üöÄ B·∫Øt ƒë·∫ßu t√°c v·ª•: L·∫•y danh s√°ch camera t·ª´ Database.")
        
        conn = None
        try:
            conn = get_connection()
            if conn is None:
                logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database ƒë·ªÉ l·∫•y danh s√°ch camera.")
                return

            with conn.cursor() as cursor:
                cursor.execute("SELECT name, rtsp_url, camera_id FROM cameras")
                cameras = cursor.fetchall()

            if not cameras:
                logger.warning("‚ö†Ô∏è Kh√¥ng c√≥ camera n√†o ƒë∆∞·ª£c t√¨m th·∫•y t·ª´ Database.")
                return

            logger.info(f"üìπ T√¨m th·∫•y {len(cameras)} camera. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·ªìng th·ªùi v·ªõi {self.max_workers} threads...")
            
            # Th√™m th√¥ng tin th·ªùi gian b·∫Øt ƒë·∫ßu
            start_time = datetime.now()
            
            # S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ x·ª≠ l√Ω camera ƒë·ªìng th·ªùi
            with ThreadPoolExecutor(max_workers=self.max_workers, thread_name_prefix="CameraWorker") as executor:
                # G·ª≠i t·∫•t c·∫£ c√°c camera v√†o thread pool
                future_to_camera = {
                    executor.submit(self._process_single_camera, camera): camera 
                    for camera in cameras
                }
                
                # Theo d√µi ti·∫øn tr√¨nh v√† k·∫øt qu·∫£
                successful_cameras = []
                failed_cameras = []
                total_qr_codes = 0
                total_frame_time = 0
                total_qr_time = 0
                
                # Th√™m timeout cho vi·ªác x·ª≠ l√Ω
                for future in as_completed(future_to_camera, timeout=self.timeout_seconds):
                    camera = future_to_camera[future]
                    camera_name = camera.get('name', 'N/A')
                    
                    try:
                        result = future.result()
                        if result["success"]:
                            successful_cameras.append(camera_name)
                            total_qr_codes += result.get("qr_count", 0)
                            total_frame_time += result.get("frame_time", 0)
                            total_qr_time += result.get("qr_time", 0)
                        else:
                            failed_cameras.append({
                                "name": camera_name,
                                "reason": result.get("reason", "Unknown error"),
                                "processing_time": result.get("processing_time", 0)
                            })
                    except Exception as e:
                        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω camera {camera_name}: {e}")
                        failed_cameras.append({
                            "name": camera_name,
                            "reason": str(e),
                            "processing_time": 0
                        })
                
                # T√≠nh to√°n th·ªùi gian x·ª≠ l√Ω
                end_time = datetime.now()
                processing_time = (end_time - start_time).total_seconds()
                
                # T·ªïng k·∫øt k·∫øt qu·∫£
                logger.info(f"üéâ Ho√†n th√†nh x·ª≠ l√Ω {len(cameras)} camera trong {processing_time:.2f} gi√¢y ({processing_time*1000:.2f}ms):")
                logger.info(f"  ‚úÖ Th√†nh c√¥ng: {len(successful_cameras)} camera")
                logger.info(f"  üîç T·ªïng QR codes t√¨m th·∫•y: {total_qr_codes}")
                logger.info(f"  ‚è∞ T·ªïng th·ªùi gian frame: {total_frame_time:.2f}ms")
                logger.info(f"  ‚è∞ T·ªïng th·ªùi gian QR detection: {total_qr_time:.2f}ms")
                logger.info(f"  ‚è∞ Th·ªùi gian trung b√¨nh/camera: {(processing_time*1000)/len(cameras):.2f}ms")
                logger.info(f"  üèÅ K·∫øt th√∫c t·∫•t c·∫£ camera l√∫c: {end_time.strftime('%H:%M:%S')}.{end_time.microsecond//1000:03d}ms")
                
                if successful_cameras:
                    logger.info(f"  üìπ Camera th√†nh c√¥ng: {', '.join(successful_cameras)}")
                
                if failed_cameras:
                    logger.warning(f"  ‚ùå Th·∫•t b·∫°i: {len(failed_cameras)} camera")
                    for failed_camera in failed_cameras:
                        logger.warning(f"    - {failed_camera['name']}: {failed_camera['reason']} (Th·ªùi gian: {failed_camera['processing_time']:.2f}ms)")

        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh trong t√°c v·ª•: {e}")
        finally:
            if conn:
                conn.close()
                logger.debug("Database connection closed.")

    def start(self):
        """
        Th√™m c√¥ng vi·ªác v√†o scheduler v√† b·∫Øt ƒë·∫ßu ch·∫°y.
        T√≠nh to√°n th·ªùi gian b·∫Øt ƒë·∫ßu v√†o ph√∫t ti·∫øp theo.
        V√≠ d·ª•: n·∫øu start l√∫c 2:40:10 th√¨ s·∫Ω b·∫Øt ƒë·∫ßu l√∫c 2:41:00 (realtime)
        """
        logger.info("Kh·ªüi ƒë·ªông d·ªãch v·ª• t√°c v·ª• n·ªÅn...")
        
        # T√≠nh to√°n th·ªùi gian b·∫Øt ƒë·∫ßu v√†o ph√∫t ti·∫øp theo (realtime)
        now = datetime.now()
        # T√≠nh th·ªùi gian ƒë·∫øn ph√∫t ti·∫øp theo v·ªõi gi√¢y = 0
        next_minute = now.replace(second=0, microsecond=0) + timedelta(minutes=1)
        
        logger.info(f"Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S')}")
        logger.info(f"S·∫Ω b·∫Øt ƒë·∫ßu ki·ªÉm tra l√∫c: {next_minute.strftime('%H:%M:%S')}")
        
        # Th√™m job ƒë·∫ßu ti√™n ƒë·ªÉ ch·∫°y v√†o th·ªùi ƒëi·ªÉm ƒë√£ t√≠nh to√°n
        self.scheduler.add_job(
            self._check_and_process_cameras,
            'date',
            run_date=next_minute,
            id='initial_camera_processing_job',
            replace_existing=True
        )
        
        # Th√™m job ƒë·ªãnh k·ª≥ ƒë·ªÉ ch·∫°y m·ªói ph√∫t sau l·∫ßn ƒë·∫ßu ti√™n
        self.scheduler.add_job(
            self._check_and_process_cameras,
            'interval',
            minutes=1,
            id='periodic_camera_processing_job',
            replace_existing=True,
            start_date=next_minute + timedelta(minutes=1)  # B·∫Øt ƒë·∫ßu t·ª´ ph√∫t th·ª© 2
        )
        
        self.scheduler.start()
        logger.info("D·ªãch v·ª• t√°c v·ª• n·ªÅn ƒë√£ b·∫Øt ƒë·∫ßu, s·∫Ω ki·ªÉm tra m·ªói ph√∫t t·ª´ th·ªùi ƒëi·ªÉm ƒë√£ l√™n l·ªãch.")

    def stop(self):
        """
        D·ª´ng scheduler.
        """
        logger.info("D·ª´ng d·ªãch v·ª• t√°c v·ª• n·ªÅn...")
        self.scheduler.shutdown()
        logger.info("D·ªãch v·ª• t√°c v·ª• n·ªÅn ƒë√£ d·ª´ng.")

# T·∫°o m·ªôt instance ƒë·ªÉ c√≥ th·ªÉ import v√† s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
camera_task_service = CameraTaskServiceTest()
