from apscheduler.schedulers.background import BackgroundScheduler
import logging
import sys
import os
from datetime import datetime, time, timedelta

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc c·ªßa d·ª± √°n v√†o sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.rtsp_service import rtsp_service
from services.database_service import database_service
from db.database import get_connection

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CameraTaskServiceTest:
    def __init__(self):
        self.scheduler = BackgroundScheduler(daemon=True)

    def _check_and_process_cameras(self):
        """
        C√¥ng vi·ªác ƒë∆∞·ª£c l√™n l·ªãch ƒë·ªÉ ki·ªÉm tra th·ªùi gian v√† x·ª≠ l√Ω camera.
        Ch·ªâ th·ª±c hi·ªán khi th·ªùi gian hi·ªán t·∫°i kh·ªõp v·ªõi capture_time trong database.
        """
        current_time = datetime.now().time()
        logger.info(f"Ki·ªÉm tra th·ªùi gian hi·ªán t·∫°i: {current_time.strftime('%H:%M:%S')}")
        
        # L·∫•y danh s√°ch l·ªãch ch·ª•p ƒëang ho·∫°t ƒë·ªông
        active_schedules = database_service.get_active_schedules()
        
        if not active_schedules:
            logger.info("Kh√¥ng c√≥ l·ªãch ch·ª•p n√†o ƒëang ho·∫°t ƒë·ªông.")
            return
        
        logger.info(f"T√¨m th·∫•y {len(active_schedules)} l·ªãch ch·ª•p ƒëang ho·∫°t ƒë·ªông")
        
        # Ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ kh·ªõp v·ªõi b·∫•t k·ª≥ capture_time n√†o kh√¥ng
        matching_schedules = []
        for schedule in active_schedules:
            capture_time_str = schedule['capture_time']
            # Chuy·ªÉn ƒë·ªïi string th√†nh time object
            if isinstance(capture_time_str, str):
                try:
                    capture_time = datetime.strptime(capture_time_str, '%H:%M:%S').time()
                except ValueError:
                    logger.warning(f"Kh√¥ng th·ªÉ parse th·ªùi gian: {capture_time_str}")
                    continue
            else:
                capture_time = capture_time_str
            
            # So s√°nh th·ªùi gian (ch·ªâ so s√°nh gi·ªù v√† ph√∫t, b·ªè qua gi√¢y)
            if (current_time.hour == capture_time.hour and 
                current_time.minute == capture_time.minute):
                matching_schedules.append(schedule)
                logger.info(f"‚úÖ Th·ªùi gian kh·ªõp v·ªõi l·ªãch ch·ª•p: {capture_time_str}")
        
        if not matching_schedules:
            logger.info("Kh√¥ng c√≥ l·ªãch ch·ª•p n√†o kh·ªõp v·ªõi th·ªùi gian hi·ªán t·∫°i.")
            return
        
        # N·∫øu c√≥ l·ªãch ch·ª•p kh·ªõp, th·ª±c hi·ªán x·ª≠ l√Ω camera
        logger.info(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω camera theo {len(matching_schedules)} l·ªãch ch·ª•p kh·ªõp")
        self._process_cameras()

    def _process_cameras(self):
        """
        X·ª≠ l√Ω t·∫•t c·∫£ camera - l·∫•y frame, ph√°t hi·ªán QR v√† l∆∞u v√†o database.
        """
        logger.info("B·∫Øt ƒë·∫ßu t√°c v·ª•: L·∫•y danh s√°ch camera t·ª´ Database.")
        
        conn = None
        try:
            conn = get_connection()
            if conn is None:
                logger.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database ƒë·ªÉ l·∫•y danh s√°ch camera.")
                return

            with conn.cursor() as cursor:
                cursor.execute("SELECT name, rtsp_url, camera_id FROM cameras")
                cameras = cursor.fetchall()

            if not cameras:
                logger.warning("Kh√¥ng c√≥ camera n√†o ƒë∆∞·ª£c t√¨m th·∫•y t·ª´ Database.")
                return

            logger.info(f"T√¨m th·∫•y {len(cameras)} camera. B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")

            for i, camera in enumerate(cameras):
                camera_name = camera.get('name', 'N/A')
                rtsp_url = camera.get('rtsp_url')
                camera_id = camera.get('camera_id', i)  # L·∫•y camera_id t·ª´ database ho·∫∑c d√πng index

                if not rtsp_url:
                    logger.warning(f"Camera '{camera_name}' kh√¥ng c√≥ rtsp_url. B·ªè qua.")
                    continue

                logger.info(f"--- ƒêang x·ª≠ l√Ω Camera: {camera_name} (ID: {camera_id}) ---")
                logger.info(f"RTSP URL: {rtsp_url}")
                
                # 1. L·∫•y frame t·ª´ RTSP
                frame = rtsp_service.get_frame_from_rtsp(rtsp_url)

                if frame is not None:
                    # 2. N·∫øu l·∫•y frame th√†nh c√¥ng, th·ª±c hi·ªán nh·∫≠n di·ªán QR v√† l∆∞u v√†o database
                    logger.info(f"Ph√°t hi·ªán QR cho Camera: {camera_name}")
                    newly_found_rois = rtsp_service.qr_detection_saveToDb_test(frame, camera_id)
                    
                    if newly_found_rois:
                        logger.info(f"C√°c ROI m·ªõi t√¨m th·∫•y cho {camera_name}: {len(newly_found_rois)} QR codes")
                        # Log chi ti·∫øt t·ª´ng QR code
                        for j, detection in enumerate(newly_found_rois):
                            rect, name, roi_width, center_x, center_y = detection
                            logger.info(f"  QR {j+1}: {name} - Center: ({center_x}, {center_y}) - Width: {roi_width}")
                        # D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u v√†o database trong h√†m qr_detection_saveToDb
                    else:
                        logger.info(f"Kh√¥ng t√¨m th·∫•y ROI m·ªõi n√†o cho {camera_name}.")
                else:
                    logger.error(f"Kh√¥ng th·ªÉ l·∫•y frame cho Camera: {camera_name}")
                
                logger.info(f"--- Ho√†n th√†nh x·ª≠ l√Ω Camera: {camera_name} ---")

        except Exception as e:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong t√°c v·ª•: {e}")
        finally:
            if conn:
                conn.close()
                logger.debug("Database connection closed.")

    def start(self):
        """
        Th√™m c√¥ng vi·ªác v√†o scheduler v√† b·∫Øt ƒë·∫ßu ch·∫°y.
        T√≠nh to√°n th·ªùi gian b·∫Øt ƒë·∫ßu v√†o ph√∫t ti·∫øp theo.
        V√≠ d·ª•: n·∫øu start l√∫c 2:40:10 th√¨ s·∫Ω b·∫Øt ƒë·∫ßu l√∫c 2:41:00 (realtime)
        """
        logger.info("Kh·ªüi ƒë·ªông d·ªãch v·ª• t√°c v·ª• n·ªÅn...")
        
        # T√≠nh to√°n th·ªùi gian b·∫Øt ƒë·∫ßu v√†o ph√∫t ti·∫øp theo (realtime)
        now = datetime.now()
        # T√≠nh th·ªùi gian ƒë·∫øn ph√∫t ti·∫øp theo v·ªõi gi√¢y = 0
        next_minute = now.replace(second=0, microsecond=0) + timedelta(minutes=1)
        
        logger.info(f"Th·ªùi gian hi·ªán t·∫°i: {now.strftime('%H:%M:%S')}")
        logger.info(f"S·∫Ω b·∫Øt ƒë·∫ßu ki·ªÉm tra l√∫c: {next_minute.strftime('%H:%M:%S')}")
        
        # Th√™m job ƒë·∫ßu ti√™n ƒë·ªÉ ch·∫°y v√†o th·ªùi ƒëi·ªÉm ƒë√£ t√≠nh to√°n
        self.scheduler.add_job(
            self._check_and_process_cameras,
            'date',
            run_date=next_minute,
            id='initial_camera_processing_job',
            replace_existing=True
        )
        
        # Th√™m job ƒë·ªãnh k·ª≥ ƒë·ªÉ ch·∫°y m·ªói ph√∫t sau l·∫ßn ƒë·∫ßu ti√™n
        self.scheduler.add_job(
            self._check_and_process_cameras,
            'interval',
            minutes=1,
            id='periodic_camera_processing_job',
            replace_existing=True,
            start_date=next_minute + timedelta(minutes=1)  # B·∫Øt ƒë·∫ßu t·ª´ ph√∫t th·ª© 2
        )
        
        self.scheduler.start()
        logger.info("D·ªãch v·ª• t√°c v·ª• n·ªÅn ƒë√£ b·∫Øt ƒë·∫ßu, s·∫Ω ki·ªÉm tra m·ªói ph√∫t t·ª´ th·ªùi ƒëi·ªÉm ƒë√£ l√™n l·ªãch.")

    def stop(self):
        """
        D·ª´ng scheduler.
        """
        logger.info("D·ª´ng d·ªãch v·ª• t√°c v·ª• n·ªÅn...")
        self.scheduler.shutdown()
        logger.info("D·ªãch v·ª• t√°c v·ª• n·ªÅn ƒë√£ d·ª´ng.")

# T·∫°o m·ªôt instance ƒë·ªÉ c√≥ th·ªÉ import v√† s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
camera_task_service = CameraTaskServiceTest()
