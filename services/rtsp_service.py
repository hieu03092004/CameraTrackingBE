import cv2,zxingcpp
import numpy as np
from typing import Optional, Tuple, Dict, Any
import logging
import time
from services.database_service import database_service
# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RTSPService:
    def __init__(self):
        self.cap = None
        self.current_frame = None
        self.rois = []
    
    def get_frame_from_rtsp(self, rtsp_url: str) -> Optional[np.ndarray]:
    
        try:
            # T·∫°o VideoCapture object
            self.cap = cv2.VideoCapture(rtsp_url)
            
            # Thi·∫øt l·∫≠p timeout cho RTSP
            self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            
            # Ki·ªÉm tra xem stream c√≥ ƒë∆∞·ª£c m·ªü th√†nh c√¥ng kh√¥ng
            if not self.cap.isOpened():
                logger.error(f"Kh√¥ng th·ªÉ m·ªü RTSP stream: {rtsp_url}")
                return None
            
            # ƒê·ªçc frame v·ªõi timeout
            ret, frame = self.cap.read()
            
            if not ret or frame is None:
                logger.error("Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ RTSP stream")
                return None
            
            # Chuy·ªÉn ƒë·ªïi frame sang BGR n·∫øu c·∫ßn (ƒë·∫£m b·∫£o format nh·∫•t qu√°n)
            if len(frame.shape) == 2:
                # N·∫øu l√† grayscale, chuy·ªÉn sang BGR
                frame = cv2.cvtColor(frame, cv2.COLOR_GRAY2BGR)
            elif frame.shape[2] == 4:
                # N·∫øu l√† RGBA, chuy·ªÉn sang BGR
                frame = cv2.cvtColor(frame, cv2.COLOR_RGBA2BGR)
            
            # C·∫≠p nh·∫≠t th√¥ng tin frame hi·ªán t·∫°i
            self.current_frame = frame
           

            
            # Log th√¥ng tin frame
            height, width = frame.shape[:2]
            logger.info(f"‚úÖ ƒê√£ l·∫•y frame th√†nh c√¥ng t·ª´: {rtsp_url}")
            logger.info(f"üìä Th√¥ng tin frame: {width}x{height}, Channels: {frame.shape[2] if len(frame.shape) > 2 else 1}")
            
            return frame
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói khi l·∫•y frame t·ª´ RTSP: {str(e)}")
            return None
        finally:
            # ƒê√≥ng stream sau khi ƒë·ªçc frame
            if self.cap is not None:
                self.cap.release()
                self.cap = None

   
    def qr_detection_saveToDb(self, frame_to_process: np.ndarray):
        """
        Ph√°t hi·ªán QR codes t·ª´ m·ªôt frame ƒë∆∞·ª£c cung c·∫•p v√† l∆∞u v√†o database.
        - N·∫øu QR name ch∆∞a c√≥ trong b·∫£ng qr_codes: insert v√†o qr_codes
        - N·∫øu QR name ƒë√£ c√≥: insert v√†o b·∫£ng measurements

        Args:
            frame_to_process (np.ndarray): Frame ·∫£nh c·∫ßn x·ª≠ l√Ω.

        Returns:
            list: M·ªôt danh s√°ch c√°c tuple ch·ª©a th√¥ng tin (rect, name, roi_width, center_x, center_y) c·ªßa c√°c QR codes ƒë∆∞·ª£c ph√°t hi·ªán.
        """
        if frame_to_process is None:
            logger.error("ƒê√£ nh·∫≠n frame r·ªóng ƒë·ªÉ x·ª≠ l√Ω QR.")
            return []

        logger.info("ƒê√£ v√†o h√†m qr_detection_saveToDb")
        frame_copy = frame_to_process.copy()

        # S·ª≠ d·ª•ng zxingcpp ƒë·ªÉ ƒë·ªçc barcodes
        results = zxingcpp.read_barcodes(frame_copy)
        qr_codes = []

        for result in results:
            if result.format != zxingcpp.BarcodeFormat.QRCode or not result.position:
                continue

            # Convert position to points with rounding
            pts = [
                (round(result.position.top_left.x), round(result.position.top_left.y)),
                (round(result.position.top_right.x), round(result.position.top_right.y)),
                (round(result.position.bottom_right.x), round(result.position.bottom_right.y)),
                (round(result.position.bottom_left.x), round(result.position.bottom_left.y))
            ]

            qr_codes.append((result.text, pts))

        # M·∫£ng ƒë·ªÉ l∆∞u QR codes ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán (tr√°nh tr√πng l·∫∑p)
        detected_qr_codes = []
        new_rois = []

        # X·ª≠ l√Ω t·ª´ng QR code ƒë∆∞·ª£c ph√°t hi·ªán
        for text, points in qr_codes:
            pts = np.array(points, dtype=np.int32)

            # T√≠nh to√°n ƒëi·ªÉm trung t√¢m
            center_x = round(sum(pt[0] for pt in points) / 4)
            center_y = round(sum(pt[1] for pt in points) / 4)

            # Ki·ªÉm tra tr√πng l·∫∑p v·ªõi ng∆∞·ª°ng 100px
            is_duplicate = any(
                abs(center_x - cx) < 100 and abs(center_y - cy) < 100
                for cx, cy in detected_qr_codes
            )

            if not is_duplicate:
                # Th√™m v√†o danh s√°ch QR ƒë√£ ph√°t hi·ªán
                detected_qr_codes.append((center_x, center_y))

                # T√≠nh to√°n t·ªça ƒë·ªô ROI v·ªõi l√†m tr√≤n
                x_min = round(min(pt[0] for pt in points))
                y_min = round(min(pt[1] for pt in points))
                x_max = round(max(pt[0] for pt in points))
                y_max = round(max(pt[1] for pt in points))

                # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc ch·∫µn cho ROI
                width = x_max - x_min
                height = y_max - y_min
                if width % 2 != 0:
                    x_max += 1
                if height % 2 != 0:
                    y_max += 1

                # T√≠nh to√°n roi_width
                roi_width = abs(x_max - x_min)

                # T·∫°o ROI rectangle
                rect = (x_min, y_min, x_max, y_max)
                name = text or f"QR_{len(self.rois)}"

                # ==================== LOGIC L∆ØU V√ÄO DATABASE ====================
                print(f"\nüîç X·ª≠ l√Ω QR code: {name}")
                print(f"   - Center: ({center_x}, {center_y})")
                print(f"   - ROI: ({x_min}, {y_min}, {x_max}, {y_max})")
                
                # Ki·ªÉm tra xem QR name ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
                qr_exists = self.check_roi_name_exists(name)
                
                if not qr_exists:
                    # QR name ch∆∞a t·ªìn t·∫°i -> insert v√†o b·∫£ng qr_codes
                    print(f"   üìù QR name '{name}' ch∆∞a t·ªìn t·∫°i -> Th√™m v√†o b·∫£ng qr_codes")
                    qr_code = database_service.create_qr_code(
                        name_roi=name,
                        initial_x=center_x,
                        initial_y=center_y
                    )
                    
                    if qr_code:
                        print(f"   ‚úÖ ƒê√£ th√™m QR code v√†o database: ID {qr_code['qr_code_id']}")
                    else:
                        print(f"   ‚ùå Kh√¥ng th·ªÉ th√™m QR code v√†o database")
                else:
                    # QR name ƒë√£ t·ªìn t·∫°i -> insert v√†o b·∫£ng measurements
                    print(f"   üìä QR name '{name}' ƒë√£ t·ªìn t·∫°i -> Th√™m v√†o b·∫£ng measurements")
                    
                    # L·∫•y QR code ID t·ª´ database
                    qr_code = database_service.get_qr_code_by_name(name)
                    if qr_code:
                        measurement = database_service.create_measurement(
                            x=center_x,
                            y=center_y,
                            qr_code_id=qr_code['qr_code_id']
                        )
                        
                        if measurement:
                            print(f"   ‚úÖ ƒê√£ th√™m measurement v√†o database: ID {measurement['measurement_id']}")
                        else:
                            print(f"   ‚ùå Kh√¥ng th·ªÉ th√™m measurement v√†o database")
                    else:
                        print(f"   ‚ùå Kh√¥ng th·ªÉ l·∫•y QR code ID t·ª´ database")
                
                # ==================== K·∫æT TH√öC LOGIC DATABASE ====================

                # Th√™m th√¥ng tin ƒë·∫ßy ƒë·ªß v√†o danh s√°ch v·ªõi roi_width v√† center coordinates
                new_rois.append((rect, name, roi_width, center_x, center_y))
                print(f"center_x: {center_x}, center_y: {center_y}")
                
                # Theo d√µi v·ªã tr√≠ laser v√† QR
              

                # In ra th√¥ng tin QR code
                print(f"QR Text: {text}")
                print(f"  Center: (x={center_x}, y={center_y})")
                print(f"  ROI rect: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                print(f"  Name: {name}")
                print("-" * 40)

        # Th√™m c√°c ROI m·ªõi v√†o danh s√°ch ch√≠nh
        # self.rois.extend(new_rois) # <-- B·ªè d√≤ng n√†y
        print("New rois found: ", new_rois)
        
        print(f"T·ªïng s·ªë QR codes ph√°t hi·ªán trong l·∫ßn ch·∫°y n√†y: {len(detected_qr_codes)}")
        
        return new_rois # <-- Tr·∫£ v·ªÅ danh s√°ch c√°c tuple (rect, name, roi_width, center_x, center_y)
    def qr_detection_saveToDb_test(self, frame_to_process: np.ndarray, camera_id: int):
        """
        Ph√°t hi·ªán QR codes t·ª´ m·ªôt frame ƒë∆∞·ª£c cung c·∫•p v√† l∆∞u v√†o database.
        - N·∫øu QR name ch∆∞a c√≥ trong b·∫£ng qr_codes: insert v√†o qr_codes
        - N·∫øu QR name ƒë√£ c√≥: insert v√†o b·∫£ng measurements

        Args:
            frame_to_process (np.ndarray): Frame ·∫£nh c·∫ßn x·ª≠ l√Ω.
            camera_id (int): ID c·ªßa camera

        Returns:
            list: M·ªôt danh s√°ch c√°c tuple ch·ª©a th√¥ng tin (rect, name, roi_width, center_x, center_y) c·ªßa c√°c QR codes ƒë∆∞·ª£c ph√°t hi·ªán.
        """
        if frame_to_process is None:
            logger.error("ƒê√£ nh·∫≠n frame r·ªóng ƒë·ªÉ x·ª≠ l√Ω QR.")
            return []

        logger.info(f"ƒê√£ v√†o h√†m qr_detection_saveToDb_test v·ªõi camera_id: {camera_id}")
        frame_copy = frame_to_process.copy()

        # S·ª≠ d·ª•ng zxingcpp ƒë·ªÉ ƒë·ªçc barcodes
        results = zxingcpp.read_barcodes(frame_copy)
        qr_codes = []

        for result in results:
            if result.format != zxingcpp.BarcodeFormat.QRCode or not result.position:
                continue

            # Convert position to points with rounding
            pts = [
                (round(result.position.top_left.x), round(result.position.top_left.y)),
                (round(result.position.top_right.x), round(result.position.top_right.y)),
                (round(result.position.bottom_right.x), round(result.position.bottom_right.y)),
                (round(result.position.bottom_left.x), round(result.position.bottom_left.y))
            ]

            qr_codes.append((result.text, pts))

        # M·∫£ng ƒë·ªÉ l∆∞u QR codes ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán (tr√°nh tr√πng l·∫∑p)
        detected_qr_codes = []
        new_rois = []

        # X·ª≠ l√Ω t·ª´ng QR code ƒë∆∞·ª£c ph√°t hi·ªán
        for text, points in qr_codes:
            pts = np.array(points, dtype=np.int32)

            # T√≠nh to√°n ƒëi·ªÉm trung t√¢m
            center_x = round(sum(pt[0] for pt in points) / 4)
            center_y = round(sum(pt[1] for pt in points) / 4)

            # Ki·ªÉm tra tr√πng l·∫∑p v·ªõi ng∆∞·ª°ng 100px
            is_duplicate = any(
                abs(center_x - cx) < 100 and abs(center_y - cy) < 100
                for cx, cy in detected_qr_codes
            )

            if not is_duplicate:
                # Th√™m v√†o danh s√°ch QR ƒë√£ ph√°t hi·ªán
                detected_qr_codes.append((center_x, center_y))

                # T√≠nh to√°n t·ªça ƒë·ªô ROI v·ªõi l√†m tr√≤n
                x_min = round(min(pt[0] for pt in points))
                y_min = round(min(pt[1] for pt in points))
                x_max = round(max(pt[0] for pt in points))
                y_max = round(max(pt[1] for pt in points))

                # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc ch·∫µn cho ROI
                width = x_max - x_min
                height = y_max - y_min
                if width % 2 != 0:
                    x_max += 1
                if height % 2 != 0:
                    y_max += 1

                # T√≠nh to√°n roi_width
                roi_width = abs(x_max - x_min)

                # T·∫°o ROI rectangle
                rect = (x_min, y_min, x_max, y_max)
                name = text or f"QR_Camera_{camera_id}_{len(self.rois)}"

                # ==================== LOGIC L∆ØU V√ÄO DATABASE ====================
                print(f"\nüîç X·ª≠ l√Ω QR code: {name} (Camera ID: {camera_id})")
                print(f"   - Center: ({center_x}, {center_y})")
                print(f"   - ROI: ({x_min}, {y_min}, {x_max}, {y_max})")
                
                # Ki·ªÉm tra xem QR name ƒë√£ t·ªìn t·∫°i trong database ch∆∞a
                qr_exists = self.check_id_roi_exists(camera_id)
                print(f"QR_exists:{qr_exists}")
                
                if not qr_exists:
                    # QR name ch∆∞a t·ªìn t·∫°i -> insert v√†o b·∫£ng qr_codes
                    print(f"   üìù QR name '{name}' ch∆∞a t·ªìn t·∫°i -> Th√™m v√†o b·∫£ng qr_codes")
                    qr_code = database_service.create_qr_code(
                        name_roi=name,
                        initial_x=center_x,
                        initial_y=center_y
                    )
                    
                    if qr_code:
                        print(f"   ‚úÖ ƒê√£ th√™m QR code v√†o database: ID {qr_code['qr_code_id']}")
                    else:
                        print(f"   ‚ùå Kh√¥ng th·ªÉ th√™m QR code v√†o database")
                else:
                    # QR name ƒë√£ t·ªìn t·∫°i -> insert v√†o b·∫£ng measurements
                    print(f"   üìä QR name '{name}' ƒë√£ t·ªìn t·∫°i -> Th√™m v√†o b·∫£ng measurements")
                    
                    # L·∫•y QR code ID t·ª´ database
                    qr_code = database_service.get_qr_code_by_id(camera_id)
                    if qr_code:
                        measurement = database_service.create_measurement(
                            x=center_x,
                            y=center_y,
                            qr_code_id=qr_code['qr_code_id']
                        )
                        
                        if measurement:
                            print(f"   ‚úÖ ƒê√£ th√™m measurement v√†o database: ID {measurement['measurement_id']}")
                        else:
                            print(f"   ‚ùå Kh√¥ng th·ªÉ th√™m measurement v√†o database")
                    else:
                        print(f"   ‚ùå Kh√¥ng th·ªÉ l·∫•y QR code ID t·ª´ database")
                
                # ==================== K·∫æT TH√öC LOGIC DATABASE ====================

                # Th√™m th√¥ng tin ƒë·∫ßy ƒë·ªß v√†o danh s√°ch v·ªõi roi_width v√† center coordinates
                new_rois.append((rect, name, roi_width, center_x, center_y))
                print(f"center_x: {center_x}, center_y: {center_y}")
                
                # In ra th√¥ng tin QR code
                print(f"QR Text: {text}")
                print(f"  Center: (x={center_x}, y={center_y})")
                print(f"  ROI rect: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                print(f"  Name: {name}")
                print("-" * 40)

        # Th√™m c√°c ROI m·ªõi v√†o danh s√°ch ch√≠nh
        # self.rois.extend(new_rois) # <-- B·ªè d√≤ng n√†y
        print("New rois found: ", new_rois)
        
        print(f"T·ªïng s·ªë QR codes ph√°t hi·ªán trong l·∫ßn ch·∫°y n√†y: {len(detected_qr_codes)}")
        
        return new_rois # <-- Tr·∫£ v·ªÅ danh s√°ch c√°c tuple (rect, name, roi_width, center_x, center_y)
    def qr_detection(self, frame_to_process: np.ndarray):
        """
        Ph√°t hi·ªán QR codes t·ª´ m·ªôt frame ƒë∆∞·ª£c cung c·∫•p v√† l∆∞u v√†o database.
        - N·∫øu QR name ch∆∞a c√≥ trong b·∫£ng qr_codes: insert v√†o qr_codes
        - N·∫øu QR name ƒë√£ c√≥: insert v√†o b·∫£ng measurements

        Args:
            frame_to_process (np.ndarray): Frame ·∫£nh c·∫ßn x·ª≠ l√Ω.

        Returns:
            list: M·ªôt danh s√°ch c√°c tuple ch·ª©a th√¥ng tin (rect, name, roi_width, center_x, center_y) c·ªßa c√°c QR codes ƒë∆∞·ª£c ph√°t hi·ªán.
        """
        if frame_to_process is None:
            logger.error("ƒê√£ nh·∫≠n frame r·ªóng ƒë·ªÉ x·ª≠ l√Ω QR.")
            return []

        logger.info("ƒê√£ v√†o h√†m qr_detection_saveToDb")
        frame_copy = frame_to_process.copy()

        # S·ª≠ d·ª•ng zxingcpp ƒë·ªÉ ƒë·ªçc barcodes
        results = zxingcpp.read_barcodes(frame_copy)
        qr_codes = []

        for result in results:
            if result.format != zxingcpp.BarcodeFormat.QRCode or not result.position:
                continue

            # Convert position to points with rounding
            pts = [
                (round(result.position.top_left.x), round(result.position.top_left.y)),
                (round(result.position.top_right.x), round(result.position.top_right.y)),
                (round(result.position.bottom_right.x), round(result.position.bottom_right.y)),
                (round(result.position.bottom_left.x), round(result.position.bottom_left.y))
            ]

            qr_codes.append((result.text, pts))

        # M·∫£ng ƒë·ªÉ l∆∞u QR codes ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán (tr√°nh tr√πng l·∫∑p)
        detected_qr_codes = []
        new_rois = []

        # X·ª≠ l√Ω t·ª´ng QR code ƒë∆∞·ª£c ph√°t hi·ªán
        for text, points in qr_codes:
            pts = np.array(points, dtype=np.int32)

            # T√≠nh to√°n ƒëi·ªÉm trung t√¢m
            center_x = round(sum(pt[0] for pt in points) / 4)
            center_y = round(sum(pt[1] for pt in points) / 4)

            # Ki·ªÉm tra tr√πng l·∫∑p v·ªõi ng∆∞·ª°ng 100px
            is_duplicate = any(
                abs(center_x - cx) < 100 and abs(center_y - cy) < 100
                for cx, cy in detected_qr_codes
            )

            if not is_duplicate:
                # Th√™m v√†o danh s√°ch QR ƒë√£ ph√°t hi·ªán
                detected_qr_codes.append((center_x, center_y))

                # T√≠nh to√°n t·ªça ƒë·ªô ROI v·ªõi l√†m tr√≤n
                x_min = round(min(pt[0] for pt in points))
                y_min = round(min(pt[1] for pt in points))
                x_max = round(max(pt[0] for pt in points))
                y_max = round(max(pt[1] for pt in points))

                # ƒê·∫£m b·∫£o k√≠ch th∆∞·ªõc ch·∫µn cho ROI
                width = x_max - x_min
                height = y_max - y_min
                if width % 2 != 0:
                    x_max += 1
                if height % 2 != 0:
                    y_max += 1

                # T√≠nh to√°n roi_width
                roi_width = abs(x_max - x_min)

                # T·∫°o ROI rectangle
                rect = (x_min, y_min, x_max, y_max)
                name = text or f"QR_{len(self.rois)}"

                # ==================== LOGIC L∆ØU V√ÄO DATABASE ====================
                print(f"\nüîç X·ª≠ l√Ω QR code: {name}")
                print(f"   - Center: ({center_x}, {center_y})")
                print(f"   - ROI: ({x_min}, {y_min}, {x_max}, {y_max})")
                # Th√™m th√¥ng tin ƒë·∫ßy ƒë·ªß v√†o danh s√°ch v·ªõi roi_width v√† center coordinates
                new_rois.append((rect, name, roi_width, center_x, center_y))
                print(f"center_x: {center_x}, center_y: {center_y}")

                # Theo d√µi v·ªã tr√≠ laser v√† QR

                # In ra th√¥ng tin QR code
                print(f"QR Text: {text}")
                print(f"  Center: (x={center_x}, y={center_y})")
                print(f"  ROI rect: x_min={x_min}, y_min={y_min}, x_max={x_max}, y_max={y_max}")
                print(f"  Name: {name}")
                print("-" * 40)

        # Th√™m c√°c ROI m·ªõi v√†o danh s√°ch ch√≠nh
        # self.rois.extend(new_rois) # <-- B·ªè d√≤ng n√†y
        print("New rois found: ", new_rois)

        print(f"T·ªïng s·ªë QR codes ph√°t hi·ªán trong l·∫ßn ch·∫°y n√†y: {len(detected_qr_codes)}")

        return new_rois  # <-- Tr·∫£ v·ªÅ danh s√°ch c√°c tuple (rect, name, roi_width, center_x, center_y)
    def process_unit_conversion(self, rtsp_url: str, input_size_value: float):
        """
        L·∫•y frame t·ª´ RTSP, ph√°t hi·ªán QR codes v√† t√≠nh to√°n h·ªá s·ªë chuy·ªÉn ƒë·ªïi.
        
        Args:
            rtsp_url (str): URL c·ªßa RTSP stream
            input_size_value (float): K√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa QR code (mm)
            target_unit (str): ƒê∆°n v·ªã ƒë√≠ch (m·∫∑c ƒë·ªãnh "mm")
        """
        print(f"üîÑ ƒêang x·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ƒë∆°n v·ªã...")
        print(f"RTSP URL: {rtsp_url}")
        print(f"Input size value: {input_size_value} mm")
        
        # 1. L·∫•y frame t·ª´ RTSP
        frame = self.get_frame_from_rtsp(rtsp_url)
        if frame is None:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y frame t·ª´ RTSP stream")
            return None
        
        # 2. Ph√°t hi·ªán QR codes
        detections = self.qr_detection(frame)
        if not detections:
            print("Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c QR code n√†o")
            return None
        
        # 3. L·∫•y roi_width ƒë·∫ßu ti√™n (t·∫•t c·∫£ QR codes c√≥ c√πng k√≠ch th∆∞·ªõc)
        first_detection = detections[0]
        rect, name, roi_width, center_x, center_y = first_detection
        
        print(f"‚úÖ Ph√°t hi·ªán {len(detections)} QR codes")
        print(f"üìè S·ª≠ d·ª•ng roi_width ƒë·∫ßu ti√™n: {roi_width} pixels")
        print(f"üìê K√≠ch th∆∞·ªõc th·ª±c t·∫ø: {input_size_value} mm")
        
        # 4. T√≠nh to√°n h·ªá s·ªë chuy·ªÉn ƒë·ªïi
        if roi_width <= 0:
            print("‚ùå roi_width ph·∫£i l·ªõn h∆°n 0")
            return None
        
        if input_size_value <= 0:
            print("input_size_value ph·∫£i l·ªõn h∆°n 0")
            return None
        
        # T√≠nh h·ªá s·ªë chuy·ªÉn ƒë·ªïi: mm / pixel
        scale_factor = input_size_value / roi_width
        
        return scale_factor;

    def check_id_roi_exists(self, id: int) -> bool:
        """
        Ki·ªÉm tra xem roi_name ƒë√£ t·ªìn t·∫°i trong b·∫£ng qr_codes ch∆∞a.
        
        Args:
            roi_name (str): T√™n ROI c·∫ßn ki·ªÉm tra
            
        Returns:
            bool: True n·∫øu roi_name ƒë√£ t·ªìn t·∫°i, False n·∫øu ch∆∞a
        """
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi database
            if not database_service.connection:
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database")
                return False
            print(f"ID:{id}")
            # L·∫•y QR code theo t√™n
            qr_code = database_service.get_qr_code_by_id(id)
            
            if qr_code:
                print(f"‚ùå ROI '{id}'  t·ªìn t·∫°i trong database")
                return True
            else:
                print(f"‚ùå ROI  '{id}' ch∆∞a t·ªìn t·∫°i trong database")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra ROI name: {e}")
            return False

# T·∫°o instance global
rtsp_service = RTSPService() 